name: Build and ship App
on:
  workflow_dispatch:
  # repository_dispatch:
  #   types: [terraform-completed] #trigger by the successful execution of terraform workflow
  push:
    branches:
      - main

jobs:
  Build_react_app:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - uses: actions/setup-node@v4
        with:
          node-version: 20
      # verifying aws credentions
      - name: Setup and verify Aws Credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_REGION}}

      - name: Testing Aws cli
        run: aws sts get-caller-identity

      - name: Install dependencies and build
        working-directory: Tinu-taskmanager
        run: |
          echo "VITE_API_URL=${{ secrets.VITE_API_URL }}" >> .env
          echo "VITE_API_KEY=${{ secrets.VITE_API_KEY }}" >> .env
          npm ci --legacy-peer-deps
          npm run build -- --outDir Taskmanager-build



      ############Saving build Artifiact
      - name: Saving build artifact
        uses: actions/upload-artifact@v4
        with:
          name: Taskmanager-build
          path: Tinu-taskmanager/Taskmanager-build

      ##Download artifact
      - name: Download build artifact
        uses: actions/download-artifact@v4
        with:
          name: Taskmanager-build
          path: Tinu-taskmanager/Taskmanager-build

      ## Docker set up
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      ## DockerHub Login
      - name: Login to Dockerhub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      #GEt setcrets 
      - name: Write VITE secrets into .env for Docker secret mount
        run: |
          mkdir -p .secrets
          echo "VITE_API_KEY=${{ secrets.VITE_API_KEY }}" >> .secrets/appsecrets
          echo "VITE_API_URL=${{ secrets.VITE_API_URL }}" >> .secrets/appsecrets

      ## build image
      - name: Build Image with Buildkitx
        env:
          DOCKER_BUILDKIT: 1
        working-directory: Tinu-taskmanager
        run: |
          docker build \
            --secret id=appsecret,src=./.secrets/appsecrets \
            -t ${{ secrets.DOCKER_USERNAME }}/tinumind:latest .

      - name: push image to Dockerhub
        run: docker push ${{ secrets.DOCKER_USERNAME }}/tinumind:latest



      - name: Consume "$BUCKET_NAME & CLOUDFRONT_ID" env from infra repo
        run: |
          echo "BUCKET_NAME=${{ vars.BUCKET_NAME }}" >> $GITHUB_ENV
          echo "CLOUDFRONT_ID=${{ vars.CLOUDFRONT_ID }}" >> $GITHUB_ENV


      ### Upload Build to s3
      - name: Upload build to s3
        working-directory: Tinu-taskmanager
        run: aws s3 sync Taskmanager-build s3://$BUCKET_NAME --delete

      - name: Debug CloudFront Invalidation Vars
        run: |
          echo "CLOUDFRONT_ID=$CLOUDFRONT_ID"
          echo "Caller reference: invalidate-$(date +%s)"

      - name: Invalidate CloudFront cache
        run: |
          TIMESTAMP=$(date +%s)
          aws cloudfront create-invalidation \
            --distribution-id "$CLOUDFRONT_ID" \
            --invalidation-batch '{
              "Paths": {
                "Quantity": 1,
                "Items": ["/*"]
              },
              "CallerReference": "'"$TIMESTAMP"'"
            }'

      ### Notification
      - name: Send success email via Mailgun
        if: success()
        run: |
          curl -s --user "api:${{ secrets.MAILGUN_API_KEY }}" \
          https://api.mailgun.net/v3/${{ secrets.MAILGUN_DOMAIN }}/messages \
          -F from="${{ secrets.MAILGUN_FROM_EMAIL }}" \
          -F to=${{ secrets.MAILGUN_TO_EMAIL }} \
          -F subject="✅ TinuTaskmanager Build & Deploy Succeeded" \
          -F text="The GitHub Actions workflow completed successfully. The app has been deployed to S3."

      - name: Send failure email via Mailgun
        if: failure()
        run: |
          curl -s --user "api:${{ secrets.MAILGUN_API_KEY }}" \
          https://api.mailgun.net/v3/${{ secrets.MAILGUN_DOMAIN }}/messages \
          -F from="${{ secrets.MAILGUN_FROM_EMAIL }}" \
          -F to=${{ secrets.MAILGUN_TO_EMAIL }} \
          -F subject="❌ TinuTaskmanager Build or Deploy Failed" \
          -F text="The GitHub Actions workflow failed. Please check the logs for more details."
